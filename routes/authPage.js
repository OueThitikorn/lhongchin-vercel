const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const db = require('../db');
const { body, validationResult } = require('express-validator');

// -----------------------------------------------------------------------------------------------
// üîí Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

// ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ login/register
const ifLoggedIn = (req, res, next) => {
    if (req.session.isLoggedIn) {
        if (req.session.role === '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å') {
            return res.redirect('/');
        } else if (req.session.role === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' || req.session.role === '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô') {
            return res.redirect('/admin');
        }
    }
    next();
};

// ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
const ifNotLoggedIn = (req, res, next) => {
    if (!req.session.isLoggedIn) {
        return res.redirect('/auth/login');
    }
    next();
};

// -----------------------------------------------------------------------------------------------
// üîë Login / Register Page

router.get('/login', ifLoggedIn, (req, res) => {
    res.render('authPage/login');
});

router.get('/register', ifLoggedIn, (req, res) => {
    res.render('authPage/register');
});

router.get('/', ifNotLoggedIn, (req, res) => {
    db.execute("SELECT CONCAT(first_name, ' ', last_name) as name FROM users WHERE user_id = ?", [req.session.user_id])
        .then(([rows]) => {
            if (!rows.length) {
                return res.send('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
            }

            res.render('index', { name: rows[0].name });
        })
        .catch(err => {
            console.error(err);
            res.sendStatus(500);
        });
});

// -----------------------------------------------------------------------------------------------
// üßæ Register

router.post('/register', ifLoggedIn, [
    body('user_email', '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!')
        .isEmail()
        .custom((value) => {
            return db.execute('SELECT email FROM users WHERE email = ?', [value])
                .then(([rows]) => {
                    if (rows.length > 0) {
                        return Promise.reject('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
                    }
                    return true;
                });
        }),
    body('user_fname', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠').trim().not().isEmpty(),
    body('user_lname', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•').trim().not().isEmpty(),
    body('user_phone', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 10 ‡∏´‡∏•‡∏±‡∏Å').trim().isLength({ min: 10 }),
    body('user_pass', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£').trim().isLength({ min: 6 }),
    body('user_cpass').custom((value, { req }) => {
        if (value !== req.body.user_pass) {
            throw new Error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
        }
        return true;
    })
], async (req, res) => {
    const validation_Result = validationResult(req);
    const { user_fname, user_lname, user_phone, user_dob, user_gender, user_email, user_pass } = req.body;

    if (validation_Result.isEmpty()) {
        try {
            const hash_pass = await bcrypt.hash(user_pass, 12);
            await db.execute(
                'INSERT INTO users (first_name, last_name, phone, dob, gender, email, password, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                [user_fname, user_lname, user_phone, user_dob, user_gender, user_email, hash_pass, '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å']
            );

            res.render('authPage/register', {
                success_mag: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ <a href="/auth/login" class="alert-link" style="font-weight: normal;">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a>',
                register_error: [],
                old_data: {}
            });
        } catch (err) {
            console.error(err);
            res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
        }
    } else {
        const allErrors = validation_Result.errors.map(err => err.msg);
        res.render('authPage/register', {
            register_error: allErrors,
            old_data: req.body
        });
    }
});

// -----------------------------------------------------------------------------------------------
// üîì Login

router.post('/login', ifLoggedIn, [
    body('user_email').custom((value) => {
        return db.execute('SELECT email FROM users WHERE email = ?', [value])
            .then(([rows]) => {
                if (rows.length === 1) return true;
                return Promise.reject('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            });
    }),
    body('user_pass', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô').trim().not().isEmpty()
], async (req, res) => {
    const validation_Result = validationResult(req);
    const { user_email, user_pass } = req.body;

    if (!validation_Result.isEmpty()) {
        const allErrors = validation_Result.errors.map(err => err.msg);
        return res.render('authPage/login', { login_errors: allErrors });
    }

    try {
        const [rows] = await db.execute('SELECT * FROM users WHERE email = ?', [user_email]);
        if (rows.length === 0) {
            return res.render('authPage/login', { login_errors: ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'] });
        }

        const user = rows[0];
        const match = await bcrypt.compare(user_pass, user.password);

        if (!match) {
            return res.render('authPage/login', { login_errors: ['‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'] });
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á session
        req.session.isLoggedIn = true;
        req.session.user_id = user.user_id;
        req.session.role = user.role;

        if (user.role === '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å') {
            return res.redirect('/');
        } else if (user.role === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' || user.role === '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô') {
            return res.redirect('/admin');
        }

    } catch (err) {
        console.error(err);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    }
});

// -----------------------------------------------------------------------------------------------
// üö™ Logout

router.get('/logout', (req, res) => {
    req.session = null;
    res.redirect('/');
});

// -----------------------------------------------------------------------------------------------

module.exports = router;
